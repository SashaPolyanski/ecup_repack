/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/attachments/": {
    get: operations["api_attachments_list"];
    post: operations["api_attachments_create"];
  };
  "/api/attachments/{id}/": {
    get: operations["api_attachments_retrieve"];
    put: operations["api_attachments_update"];
    delete: operations["api_attachments_destroy"];
    patch: operations["api_attachments_partial_update"];
  };
  "/api/attachments/attachment-groups/": {
    get: operations["api_attachments_attachment_groups_list"];
  };
  "/api/attachments/attachment-groups/{id}/": {
    get: operations["api_attachments_attachment_groups_retrieve"];
  };
  "/api/attachments/attachment-groups/{id}/attachments/": {
    /** @description Action for update or delete attachments */
    put: operations["api_attachments_attachment_groups_attachments_update"];
    /** @description Action for update or delete attachments */
    delete: operations["api_attachments_attachment_groups_attachments_destroy"];
  };
  "/api/auth/login/": {
    /**
     * @description Check the credentials and return the REST Token
     * if the credentials are valid and authenticated.
     * Calls Django Auth login method to register User ID
     * in Django session framework
     *
     * Accept the following POST parameters: username, password
     * Return the REST Framework Token Object's key.
     */
    post: operations["api_auth_login_create"];
  };
  "/api/auth/logout/": {
    /**
     * @description Calls Django logout method and delete the Token object
     * assigned to the current User object.
     *
     * Accepts/Returns nothing.
     */
    post: operations["api_auth_logout_create"];
  };
  "/api/auth/password/change/": {
    /**
     * @description Calls Django Auth SetPasswordForm save method.
     *
     * Accepts the following POST parameters: new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["api_auth_password_change_create"];
  };
  "/api/auth/password/reset/": {
    /**
     * @description Calls Django Auth PasswordResetForm save method.
     *
     * Accepts the following POST parameters: email
     * Returns the success/fail message.
     */
    post: operations["api_auth_password_reset_create"];
  };
  "/api/auth/password/reset/confirm/": {
    /**
     * @description Password reset e-mail link is confirmed, therefore
     * this resets the user's password.
     *
     * Accepts the following POST parameters: token, uid,
     *     new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["api_auth_password_reset_confirm_create"];
  };
  "/api/auth/registration/": {
    post: operations["api_auth_registration_create"];
  };
  "/api/auth/registration/resend-email/": {
    post: operations["api_auth_registration_resend_email_create"];
  };
  "/api/auth/registration/verify-email/": {
    post: operations["api_auth_registration_verify_email_create"];
  };
  "/api/auth/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["api_auth_token_refresh_create"];
  };
  "/api/auth/token/verify/": {
    /**
     * @description Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["api_auth_token_verify_create"];
  };
  "/api/auth/user/": {
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    get: operations["api_auth_user_retrieve"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    put: operations["api_auth_user_update"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    patch: operations["api_auth_user_partial_update"];
  };
  "/api/bot/": {
    post: operations["api_bot_create"];
  };
  "/api/games/": {
    get: operations["api_games_list"];
  };
  "/api/games/{game_pk}/tournaments/": {
    get: operations["api_games_tournaments_list"];
  };
  "/api/games/{game_pk}/tournaments/{id}/": {
    get: operations["api_games_tournaments_retrieve"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/": {
    get: operations["api_games_tournaments_matches_list"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/scores/": {
    get: operations["api_games_tournaments_matches_scores_list"];
    /** @description Override create method for return ScoreReadOnlySerializer data */
    post: operations["api_games_tournaments_matches_scores_create"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/scores/{id}/": {
    get: operations["api_games_tournaments_matches_scores_retrieve"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/screenshots/": {
    get: operations["api_games_tournaments_matches_screenshots_list"];
    /** @description Create object */
    post: operations["api_games_tournaments_matches_screenshots_create"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/screenshots/{id}/": {
    get: operations["api_games_tournaments_matches_screenshots_retrieve"];
    /** @description Delete object */
    delete: operations["api_games_tournaments_matches_screenshots_destroy"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/statuses/{id}/": {
    /** @description Update object */
    put: operations["api_games_tournaments_matches_statuses_update"];
    patch: operations["api_games_tournaments_matches_statuses_partial_update"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/matches/{id}/": {
    get: operations["api_games_tournaments_matches_retrieve"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/teams/": {
    get: operations["api_games_tournaments_teams_list"];
    /** @description Create object */
    post: operations["api_games_tournaments_teams_create"];
  };
  "/api/games/{game_pk}/tournaments/{tournament_pk}/teams/{id}/": {
    get: operations["api_games_tournaments_teams_retrieve"];
    /** @description Delete object */
    delete: operations["api_games_tournaments_teams_destroy"];
  };
  "/api/games/{id}/": {
    get: operations["api_games_retrieve"];
  };
  "/api/grid/update-grid/": {
    get: operations["api_grid_update_grid_retrieve"];
  };
  "/api/matches/": {
    /** @description ViewSet for get list matches for current player */
    get: operations["api_matches_list"];
  };
  "/api/matches/{id}/": {
    /** @description ViewSet for get list matches for current player */
    get: operations["api_matches_retrieve"];
  };
  "/api/oauth2/connect/": {
    /**
     * @description Connects created social account to player
     *
     * Bypasses request to the concrete system connect view according to player value
     */
    post: operations["api_oauth2_connect_create"];
  };
  "/api/oauth2/link/": {
    /**
     * @description Bypasses request to the concrete system login view according to connector value
     *
     * :return: Response with redirect to system login page
     */
    post: operations["api_oauth2_link_create"];
  };
  "/api/platforms/": {
    get: operations["api_platforms_list"];
  };
  "/api/platforms/{id}/": {
    get: operations["api_platforms_retrieve"];
  };
  "/api/players/": {
    /** @description Manager for Player model. */
    get: operations["api_players_list"];
  };
  "/api/players/{id}/": {
    /** @description Manager for Player model. */
    get: operations["api_players_retrieve"];
  };
  "/api/players/{player_pk}/games/": {
    get: operations["api_players_games_list"];
  };
  "/api/players/{player_pk}/games/{id}/": {
    get: operations["api_players_games_retrieve"];
  };
  "/api/positions/": {
    /** @description Viewset for Position model */
    get: operations["api_positions_list"];
  };
  "/api/positions/{id}/": {
    /** @description Viewset for Position model */
    get: operations["api_positions_retrieve"];
  };
  "/api/teams/": {
    /** @description Manager for Team model. */
    get: operations["api_teams_list"];
    /** @description Create object */
    post: operations["api_teams_create"];
  };
  "/api/teams/{id}/": {
    /** @description Manager for Team model. */
    get: operations["api_teams_retrieve"];
    /** @description Update object */
    put: operations["api_teams_update"];
    /** @description Delete object */
    delete: operations["api_teams_destroy"];
    /** @description Manager for Team model. */
    patch: operations["api_teams_partial_update"];
  };
  "/api/teams/{team_pk}/games/": {
    /** @description Used to get a list of games in the team. */
    get: operations["api_teams_games_list"];
  };
  "/api/teams/{team_pk}/games/{game_pk}/players/": {
    /** @description Used to manage players in teams. */
    get: operations["api_teams_games_players_list"];
    /** @description Create object */
    post: operations["api_teams_games_players_create"];
  };
  "/api/teams/{team_pk}/games/{game_pk}/players/{id}/": {
    /** @description Used to manage players in teams. */
    get: operations["api_teams_games_players_retrieve"];
    /** @description Update object */
    put: operations["api_teams_games_players_update"];
    /** @description Delete object */
    delete: operations["api_teams_games_players_destroy"];
    /** @description Used to manage players in teams. */
    patch: operations["api_teams_games_players_partial_update"];
  };
  "/api/teams/{team_pk}/games/{game_pk}/players/{id}/accept/": {
    /** @description Accepts invitation to team. */
    get: operations["api_teams_games_players_accept_retrieve"];
  };
  "/api/teams/{team_pk}/games/{game_pk}/players/{id}/decline/": {
    /** @description Declines invitation to team. */
    get: operations["api_teams_games_players_decline_retrieve"];
  };
  "/api/teams/{team_pk}/games/{id}/": {
    /** @description Used to get a list of games in the team. */
    get: operations["api_teams_games_retrieve"];
  };
  "/api/users/{user_pk}/players/": {
    get: operations["api_users_players_list"];
  };
  "/api/users/{user_pk}/players/{id}/": {
    put: operations["api_users_players_update"];
    patch: operations["api_users_players_partial_update"];
  };
  "/attachments/": {
    get: operations["attachments_list"];
    post: operations["attachments_create"];
  };
  "/attachments/{id}/": {
    get: operations["attachments_retrieve"];
    put: operations["attachments_update"];
    delete: operations["attachments_destroy"];
    patch: operations["attachments_partial_update"];
  };
  "/attachments/attachment-groups/": {
    get: operations["attachments_attachment_groups_list"];
  };
  "/attachments/attachment-groups/{id}/": {
    get: operations["attachments_attachment_groups_retrieve"];
  };
  "/attachments/attachment-groups/{id}/attachments/": {
    /** @description Action for update or delete attachments */
    put: operations["attachments_attachment_groups_attachments_update"];
    /** @description Action for update or delete attachments */
    delete: operations["attachments_attachment_groups_attachments_destroy"];
  };
  "/auth/login/": {
    /**
     * @description Check the credentials and return the REST Token
     * if the credentials are valid and authenticated.
     * Calls Django Auth login method to register User ID
     * in Django session framework
     *
     * Accept the following POST parameters: username, password
     * Return the REST Framework Token Object's key.
     */
    post: operations["auth_login_create"];
  };
  "/auth/logout/": {
    /**
     * @description Calls Django logout method and delete the Token object
     * assigned to the current User object.
     *
     * Accepts/Returns nothing.
     */
    post: operations["auth_logout_create"];
  };
  "/auth/password/change/": {
    /**
     * @description Calls Django Auth SetPasswordForm save method.
     *
     * Accepts the following POST parameters: new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_change_create"];
  };
  "/auth/password/reset/": {
    /**
     * @description Calls Django Auth PasswordResetForm save method.
     *
     * Accepts the following POST parameters: email
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_create"];
  };
  "/auth/password/reset/confirm/": {
    /**
     * @description Password reset e-mail link is confirmed, therefore
     * this resets the user's password.
     *
     * Accepts the following POST parameters: token, uid,
     *     new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_confirm_create"];
  };
  "/auth/registration/": {
    post: operations["auth_registration_create"];
  };
  "/auth/registration/resend-email/": {
    post: operations["auth_registration_resend_email_create"];
  };
  "/auth/registration/verify-email/": {
    post: operations["auth_registration_verify_email_create"];
  };
  "/auth/token/refresh/": {
    /**
     * @description Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["auth_token_refresh_create"];
  };
  "/auth/token/verify/": {
    /**
     * @description Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["auth_token_verify_create"];
  };
  "/auth/user/": {
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    get: operations["auth_user_retrieve"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    put: operations["auth_user_update"];
    /**
     * @description Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    patch: operations["auth_user_partial_update"];
  };
  "/bot/": {
    post: operations["bot_create"];
  };
  "/games/": {
    get: operations["games_list"];
  };
  "/games/{game_pk}/tournaments/": {
    get: operations["games_tournaments_list"];
  };
  "/games/{game_pk}/tournaments/{id}/": {
    get: operations["games_tournaments_retrieve"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/": {
    get: operations["games_tournaments_matches_list"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/scores/": {
    get: operations["games_tournaments_matches_scores_list"];
    /** @description Override create method for return ScoreReadOnlySerializer data */
    post: operations["games_tournaments_matches_scores_create"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/scores/{id}/": {
    get: operations["games_tournaments_matches_scores_retrieve"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/screenshots/": {
    get: operations["games_tournaments_matches_screenshots_list"];
    /** @description Create object */
    post: operations["games_tournaments_matches_screenshots_create"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/screenshots/{id}/": {
    get: operations["games_tournaments_matches_screenshots_retrieve"];
    /** @description Delete object */
    delete: operations["games_tournaments_matches_screenshots_destroy"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{match_pk}/statuses/{id}/": {
    /** @description Update object */
    put: operations["games_tournaments_matches_statuses_update"];
    patch: operations["games_tournaments_matches_statuses_partial_update"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/matches/{id}/": {
    get: operations["games_tournaments_matches_retrieve"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/teams/": {
    get: operations["games_tournaments_teams_list"];
    /** @description Create object */
    post: operations["games_tournaments_teams_create"];
  };
  "/games/{game_pk}/tournaments/{tournament_pk}/teams/{id}/": {
    get: operations["games_tournaments_teams_retrieve"];
    /** @description Delete object */
    delete: operations["games_tournaments_teams_destroy"];
  };
  "/games/{id}/": {
    get: operations["games_retrieve"];
  };
  "/grid/update-grid/": {
    get: operations["grid_update_grid_retrieve"];
  };
  "/matches/": {
    /** @description ViewSet for get list matches for current player */
    get: operations["matches_list"];
  };
  "/matches/{id}/": {
    /** @description ViewSet for get list matches for current player */
    get: operations["matches_retrieve"];
  };
  "/oauth2/connect/": {
    /**
     * @description Connects created social account to player
     *
     * Bypasses request to the concrete system connect view according to player value
     */
    post: operations["oauth2_connect_create"];
  };
  "/oauth2/link/": {
    /**
     * @description Bypasses request to the concrete system login view according to connector value
     *
     * :return: Response with redirect to system login page
     */
    post: operations["oauth2_link_create"];
  };
  "/platforms/": {
    get: operations["platforms_list"];
  };
  "/platforms/{id}/": {
    get: operations["platforms_retrieve"];
  };
  "/players/": {
    /** @description Manager for Player model. */
    get: operations["players_list"];
  };
  "/players/{id}/": {
    /** @description Manager for Player model. */
    get: operations["players_retrieve"];
  };
  "/players/{player_pk}/games/": {
    get: operations["players_games_list"];
  };
  "/players/{player_pk}/games/{id}/": {
    get: operations["players_games_retrieve"];
  };
  "/positions/": {
    /** @description Viewset for Position model */
    get: operations["positions_list"];
  };
  "/positions/{id}/": {
    /** @description Viewset for Position model */
    get: operations["positions_retrieve"];
  };
  "/teams/": {
    /** @description Manager for Team model. */
    get: operations["teams_list"];
    /** @description Create object */
    post: operations["teams_create"];
  };
  "/teams/{id}/": {
    /** @description Manager for Team model. */
    get: operations["teams_retrieve"];
    /** @description Update object */
    put: operations["teams_update"];
    /** @description Delete object */
    delete: operations["teams_destroy"];
    /** @description Manager for Team model. */
    patch: operations["teams_partial_update"];
  };
  "/teams/{team_pk}/games/": {
    /** @description Used to get a list of games in the team. */
    get: operations["teams_games_list"];
  };
  "/teams/{team_pk}/games/{game_pk}/players/": {
    /** @description Used to manage players in teams. */
    get: operations["teams_games_players_list"];
    /** @description Create object */
    post: operations["teams_games_players_create"];
  };
  "/teams/{team_pk}/games/{game_pk}/players/{id}/": {
    /** @description Used to manage players in teams. */
    get: operations["teams_games_players_retrieve"];
    /** @description Update object */
    put: operations["teams_games_players_update"];
    /** @description Delete object */
    delete: operations["teams_games_players_destroy"];
    /** @description Used to manage players in teams. */
    patch: operations["teams_games_players_partial_update"];
  };
  "/teams/{team_pk}/games/{game_pk}/players/{id}/accept/": {
    /** @description Accepts invitation to team. */
    get: operations["teams_games_players_accept_retrieve"];
  };
  "/teams/{team_pk}/games/{game_pk}/players/{id}/decline/": {
    /** @description Declines invitation to team. */
    get: operations["teams_games_players_decline_retrieve"];
  };
  "/teams/{team_pk}/games/{id}/": {
    /** @description Used to get a list of games in the team. */
    get: operations["teams_games_retrieve"];
  };
  "/users/{user_pk}/players/": {
    get: operations["users_players_list"];
  };
  "/users/{user_pk}/players/{id}/": {
    put: operations["users_players_update"];
    patch: operations["users_players_partial_update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AttachmentCreate: {
      id: number;
      /** Format: uri */
      file: string;
      mime_type: components["schemas"]["MimeTypeEnum"];
    };
    AttachmentGroupReadOnly: {
      id: number;
      /** @description type of AttachmentGroup */
      type: components["schemas"]["AttachmentGroupReadOnlyTypeEnum"];
      attachments: readonly components["schemas"]["AttachmentReadOnly"][];
    };
    /** @enum {string} */
    AttachmentGroupReadOnlyTypeEnum: "USER_AVATAR" | "WORKSPACE_AVATAR" | "SYSTEM_LOGO" | "CONNECTOR_LOGO" | "ENTITY_LOGO";
    AttachmentReadOnly: {
      id: number;
      /** Format: uri */
      file: string;
      created_by: number | null;
      /** Format: date-time */
      created: string;
    };
    /** @enum {string} */
    CountryEnum: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "CV" | "KH" | "CM" | "CA" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "KP" | "MK" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "KR" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";
    /** @description Serializer for Currency */
    CurrencyReadOnly: {
      type: components["schemas"]["CurrencyReadOnlyTypeEnum"];
      name: string;
      icon: components["schemas"]["AttachmentReadOnly"];
    };
    /** @enum {string} */
    CurrencyReadOnlyTypeEnum: "CASH" | "VIRTUAL";
    ExternalPlatformPlayerReadOnly: {
      id: number;
      external_platform: components["schemas"]["ExternalPlatformReadOnly"];
      url: string;
    };
    ExternalPlatformReadOnly: {
      id: number;
      name: components["schemas"]["ExternalPlatformReadOnlyNameEnum"];
      title: string | null;
      external_id_name: string;
      avatar: components["schemas"]["AttachmentReadOnly"];
    };
    /** @enum {string} */
    ExternalPlatformReadOnlyNameEnum: "BATTLE_NET" | "STEAM" | "OTHER";
    GameReadOnly: {
      id: number;
      avatar: components["schemas"]["AttachmentReadOnly"];
      banner: components["schemas"]["AttachmentReadOnly"];
      header: components["schemas"]["AttachmentReadOnly"];
      name: string;
      description: string;
    };
    /** @enum {string} */
    GenderEnum: "FEMALE" | "MALE";
    /** @description Serializer for JWT authentication. */
    JWT: {
      access_token: string;
      refresh_token: string;
      user: components["schemas"]["User"];
    };
    /** @enum {string} */
    LanguageEnum: "af" | "ar" | "ast" | "az" | "bg" | "be" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "eo" | "es" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "us";
    Login: {
      username?: string;
      /** Format: email */
      email?: string;
      password: string;
    };
    /** @enum {integer} */
    MatchFormatEnum: 1 | 3 | 5;
    MatchTeamScreenshot: {
      id: number;
      team: number;
      match: number;
      attachment: number;
    };
    MatchTeamScreenshotReadOnly: {
      id: number;
      team: number;
      match: number;
      attachment: components["schemas"]["AttachmentReadOnly"];
    };
    /** @enum {string} */
    MimeTypeEnum: "image/png" | "image/svg+xml" | "image/jpg" | "image/jpeg";
    /** @enum {unknown} */
    NullEnum: "";
    PaginatedAttachmentGroupReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["AttachmentGroupReadOnly"][];
    };
    PaginatedAttachmentReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["AttachmentReadOnly"][];
    };
    PaginatedExternalPlatformReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["ExternalPlatformReadOnly"][];
    };
    PaginatedGameReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["GameReadOnly"][];
    };
    PaginatedMatchTeamScreenshotReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["MatchTeamScreenshotReadOnly"][];
    };
    PaginatedPlayerMatchList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PlayerMatch"][];
    };
    PaginatedPlayerReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PlayerReadOnly"][];
    };
    PaginatedScoreReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["ScoreReadOnly"][];
    };
    PaginatedTeamPlayerReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TeamPlayerReadOnly"][];
    };
    PaginatedTeamPositionReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TeamPositionReadOnly"][];
    };
    PaginatedTeamReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TeamReadOnly"][];
    };
    PaginatedTournamentReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TournamentReadOnly"][];
    };
    PaginatedTournamentTeamReadOnlyList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TournamentTeamReadOnly"][];
    };
    PasswordChange: {
      new_password1: string;
      new_password2: string;
    };
    /** @description Serializer for requesting a password reset e-mail. */
    PasswordReset: {
      /** Format: email */
      email: string;
    };
    /** @description Serializer for confirming a password reset attempt. */
    PasswordResetConfirm: {
      new_password1: string;
      new_password2: string;
      uid: string;
      token: string;
    };
    PatchedAttachmentReadOnly: {
      id?: number;
      /** Format: uri */
      file?: string;
      created_by?: number | null;
      /** Format: date-time */
      created?: string;
    };
    PatchedPlayerUpdate: {
      about?: string;
      favourite_games?: number[];
    };
    PatchedTeamMatchStatus: {
      id?: number;
      team?: number;
      status?: components["schemas"]["TeamMatchStatusStatusEnum"];
    };
    PatchedTeamPlayerUpdate: {
      id?: number;
      positions?: number[];
      status?: components["schemas"]["StatusBa0Enum"];
      role?: components["schemas"]["RoleEnum"];
    };
    PatchedTeamUpdate: {
      currencies?: readonly components["schemas"]["TeamCurrencyReadOnly"][];
      avatar?: components["schemas"]["AttachmentReadOnly"];
      is_virtual?: boolean;
      id?: number;
      name?: string;
      location?: string;
      rating?: number;
      about?: string;
      social_media_link?: string;
    };
    PatchedUser: {
      id?: number;
      /**
       * Email address
       * Format: email
       */
      email?: string;
      first_name?: string;
      country?: components["schemas"]["CountryEnum"];
      last_name?: string;
      /** Format: date */
      birth_day?: string | null;
      gender?: components["schemas"]["GenderEnum"] | components["schemas"]["NullEnum"] | null;
      avatar?: components["schemas"]["AttachmentReadOnly"] | null;
      avatar_id?: number | null;
      language?: components["schemas"]["LanguageEnum"];
      currencies?: components["schemas"]["UserCurrencyReadOnly"][];
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username?: string;
    };
    Permission: {
      id: number;
      name: components["schemas"]["PermissionNameEnum"];
    };
    /** @enum {string} */
    PermissionNameEnum: "TEAM_MANAGE" | "TEAM_PLAYER_MANAGE" | "TOURNAMENT_JOIN" | "MATCH_SET_SCORE";
    Player: {
      id: number;
    };
    /** @description Fields which need for redirect to match page */
    PlayerMatch: {
      id: number;
      tournament: number | null;
      game: string;
      stage: number;
      status: components["schemas"]["Status1fcEnum"];
      format: string;
      teams: components["schemas"]["TeamInMatch"][];
    };
    PlayerOAuth2ViewSetConnect: {
      code: string;
    };
    PlayerOAuth2ViewSetLink: {
      platform: string;
    };
    PlayerReadOnly: {
      id: number;
      rating: number;
      user: components["schemas"]["UserPlayer"];
      teams: components["schemas"]["PlayerTeam"][];
      favourite_games: components["schemas"]["GameReadOnly"][];
      about: string | null;
      virtual_team: components["schemas"]["PlayerTeam"] | null;
      external_platforms: components["schemas"]["ExternalPlatformPlayerReadOnly"][];
    };
    PlayerTeam: {
      id: number;
      name: string;
      location: string | null;
      rating: number;
      currencies: readonly components["schemas"]["TeamCurrencyReadOnly"][];
    };
    PlayerUpdate: {
      about?: string;
      favourite_games?: number[];
    };
    Register: {
      username: string;
      /** Format: email */
      email: string;
      password1: string;
      password2: string;
    };
    ResendEmailVerification: {
      /** Format: email */
      email: string;
    };
    RestAuthDetail: {
      detail: string;
    };
    /** @enum {string} */
    RoleEnum: "BASIC" | "OWNER" | "MANAGER";
    ScheduleReadOnly: {
      id: number;
      tournament: number;
      /** Format: date-time */
      start_of_applications: string;
      /** Format: date-time */
      finish_of_applications: string | null;
      /** Format: date-time */
      participation_confirmation: string | null;
      /** Format: date-time */
      grid_publication: string | null;
      tours: components["schemas"]["TournamentScheduleTour"][];
    };
    ScoreReadOnly: {
      id: number;
      period: number;
      score_teams: components["schemas"]["ScoreTeamReadOnly"][];
      period_winner_team: components["schemas"]["TeamReadOnly"] | null;
      match: number;
    };
    ScoreTeamReadOnly: {
      value: number;
      team: components["schemas"]["TeamReadOnly"];
    };
    ScoreUpdate: {
      value: number;
      team?: number;
    };
    /** @enum {string} */
    Status1fcEnum: "BYE" | "NOT_STARTED" | "STARTED" | "FINISHED";
    /** @enum {string} */
    StatusBa0Enum: "INVITED" | "ACCEPTED" | "DISMISSED";
    Team: {
      currencies: readonly components["schemas"]["TeamCurrencyReadOnly"][];
      avatar?: components["schemas"]["AttachmentReadOnly"];
      is_virtual: boolean;
      id: number;
      name: string;
      location: string;
      about?: string;
      social_media_link?: string;
      rating: number;
    };
    TeamCurrencyReadOnly: {
      id: number;
      currency: components["schemas"]["CurrencyReadOnly"];
      /** Format: int64 */
      value?: number;
    };
    TeamInMatch: {
      id: number;
      name: string;
    };
    TeamMatchStatus: {
      id: number;
      team: number;
      status: components["schemas"]["TeamMatchStatusStatusEnum"];
    };
    /** @enum {string} */
    TeamMatchStatusStatusEnum: "READY" | "NOT_READY";
    TeamPlayerCreate: {
      id: number;
      team: number;
      player: number;
      game: number;
    };
    TeamPlayerReadOnly: {
      id: number;
      team: number | null;
      player: components["schemas"]["PlayerReadOnly"];
      positions: components["schemas"]["TeamPositionReadOnly"][];
      status: components["schemas"]["StatusBa0Enum"];
      role: components["schemas"]["RoleEnum"];
    };
    TeamPlayerUpdate: {
      id: number;
      positions?: number[];
      status?: components["schemas"]["StatusBa0Enum"];
      role?: components["schemas"]["RoleEnum"];
    };
    TeamPositionReadOnly: {
      id: number;
      name: components["schemas"]["TeamPositionReadOnlyNameEnum"];
      description: string | null;
      permissions: components["schemas"]["Permission"][];
    };
    /** @enum {string} */
    TeamPositionReadOnlyNameEnum: "CAPTAIN" | "COACH" | "MANAGER";
    TeamReadOnly: {
      id: number;
      players: components["schemas"]["TeamPlayerReadOnly"][];
      currencies: components["schemas"]["TeamCurrencyReadOnly"][];
      captain: components["schemas"]["TeamPlayerReadOnly"];
      is_virtual: boolean;
      rating: number;
      name: string;
      location: string;
      about: string;
      social_media_link: string;
    };
    TeamUpdate: {
      currencies: readonly components["schemas"]["TeamCurrencyReadOnly"][];
      avatar?: components["schemas"]["AttachmentReadOnly"];
      is_virtual: boolean;
      id: number;
      name?: string;
      location?: string;
      rating: number;
      about?: string;
      social_media_link?: string;
    };
    TokenRefresh: {
      access: string;
      refresh: string;
    };
    TokenVerify: {
      token: string;
    };
    TournamentCurrencyValue: {
      stage?: number | null;
      /** Format: int64 */
      value: number;
      currency: components["schemas"]["CurrencyReadOnly"];
    };
    TournamentMatch: {
      id: number;
      name: string;
    };
    TournamentMatchReadOnly: {
      id: number;
      tournament: components["schemas"]["TournamentMatch"];
      teams: components["schemas"]["TeamReadOnly"][];
      winner: components["schemas"]["TeamReadOnly"];
      stage: number;
      parent: number | null;
      status: components["schemas"]["Status1fcEnum"];
      scores: components["schemas"]["ScoreReadOnly"][];
      team_match_statuses: components["schemas"]["TeamMatchStatus"][];
      referees: components["schemas"]["Player"][];
      screenshots: components["schemas"]["MatchTeamScreenshot"][];
    };
    TournamentPropertiesReadOnly: {
      match_format: components["schemas"]["MatchFormatEnum"];
      rules: number;
      max_participants: number;
      type: components["schemas"]["TournamentPropertiesReadOnlyTypeEnum"];
      type_of_opposition: components["schemas"]["TypeOfOppositionEnum"];
      quantity_of_players_in_team: number;
    };
    /** @enum {string} */
    TournamentPropertiesReadOnlyTypeEnum: "GROUP_ROUND_ROBIN" | "SINGLE_ELIMINATION_PLAYOFF";
    TournamentReadOnly: {
      id: number;
      game: components["schemas"]["GameReadOnly"];
      properties: components["schemas"]["TournamentPropertiesReadOnly"];
      prizes: components["schemas"]["TournamentCurrencyValue"][];
      place_prizes: {
        [key: string]: unknown;
      };
      places: components["schemas"]["TournamentTeamPlaceReadOnly"][];
      schedule: components["schemas"]["ScheduleReadOnly"];
      user_team_id: string | null;
      referees: components["schemas"]["Player"][];
      name: string;
      /** Format: uri */
      avatar: string;
      /** Format: date-time */
      start_at: string;
      description: string;
      current_stage: number;
      status: string;
      /** Format: date-time */
      finished_at: string;
      teams: components["schemas"]["TeamReadOnly"][];
    };
    TournamentScheduleTour: {
      name: string;
      /** Format: date-time */
      datetime?: string | null;
    };
    TournamentTeamCreate: {
      id: number;
    };
    TournamentTeamPlaceReadOnly: {
      id: number;
      team: components["schemas"]["TeamReadOnly"];
      place: string | null;
    };
    TournamentTeamReadOnly: {
      name: string;
      location: string;
      players: components["schemas"]["TeamPlayerReadOnly"][];
      captain: components["schemas"]["TeamPlayerReadOnly"];
      is_virtual: boolean;
      avatar: components["schemas"]["AttachmentReadOnly"];
    };
    /** @enum {string} */
    TypeOfOppositionEnum: "VERSUS" | "LOBBY";
    User: {
      id: number;
      /**
       * Email address
       * Format: email
       */
      email?: string;
      first_name?: string;
      country: components["schemas"]["CountryEnum"];
      last_name?: string;
      /** Format: date */
      birth_day?: string | null;
      gender?: components["schemas"]["GenderEnum"] | components["schemas"]["NullEnum"] | null;
      avatar: components["schemas"]["AttachmentReadOnly"] | null;
      avatar_id: number | null;
      language?: components["schemas"]["LanguageEnum"];
      currencies: components["schemas"]["UserCurrencyReadOnly"][];
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
    };
    UserCurrencyReadOnly: {
      id: number;
      currency: components["schemas"]["CurrencyReadOnly"];
      value: number;
    };
    UserPlayer: {
      avatar: components["schemas"]["AttachmentReadOnly"];
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
    };
    VerifyEmail: {
      key: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  api_attachments_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAttachmentReadOnlyList"];
        };
      };
    };
  };
  api_attachments_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentCreate"];
        "multipart/form-data": components["schemas"]["AttachmentCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AttachmentCreate"];
        };
      };
    };
  };
  api_attachments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  api_attachments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AttachmentReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentReadOnly"];
        "multipart/form-data": components["schemas"]["AttachmentReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  api_attachments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  api_attachments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAttachmentReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAttachmentReadOnly"];
        "multipart/form-data": components["schemas"]["PatchedAttachmentReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  api_attachments_attachment_groups_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAttachmentGroupReadOnlyList"];
        };
      };
    };
  };
  api_attachments_attachment_groups_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        };
      };
    };
  };
  /** @description Action for update or delete attachments */
  api_attachments_attachment_groups_attachments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentGroupReadOnly"];
        "multipart/form-data": components["schemas"]["AttachmentGroupReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        };
      };
    };
  };
  /** @description Action for update or delete attachments */
  api_attachments_attachment_groups_attachments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Check the credentials and return the REST Token
   * if the credentials are valid and authenticated.
   * Calls Django Auth login method to register User ID
   * in Django session framework
   *
   * Accept the following POST parameters: username, password
   * Return the REST Framework Token Object's key.
   */
  api_auth_login_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
        "application/x-www-form-urlencoded": components["schemas"]["Login"];
        "multipart/form-data": components["schemas"]["Login"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JWT"];
        };
      };
    };
  };
  /**
   * @description Calls Django logout method and delete the Token object
   * assigned to the current User object.
   *
   * Accepts/Returns nothing.
   */
  api_auth_logout_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth SetPasswordForm save method.
   *
   * Accepts the following POST parameters: new_password1, new_password2
   * Returns the success/fail message.
   */
  api_auth_password_change_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChange"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
        "multipart/form-data": components["schemas"]["PasswordChange"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth PasswordResetForm save method.
   *
   * Accepts the following POST parameters: email
   * Returns the success/fail message.
   */
  api_auth_password_reset_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
        "multipart/form-data": components["schemas"]["PasswordReset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Password reset e-mail link is confirmed, therefore
   * this resets the user's password.
   *
   * Accepts the following POST parameters: token, uid,
   *     new_password1, new_password2
   * Returns the success/fail message.
   */
  api_auth_password_reset_confirm_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  api_auth_registration_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Register"];
        "application/x-www-form-urlencoded": components["schemas"]["Register"];
        "multipart/form-data": components["schemas"]["Register"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["JWT"];
        };
      };
    };
  };
  api_auth_registration_resend_email_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResendEmailVerification"];
        "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
        "multipart/form-data": components["schemas"]["ResendEmailVerification"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  api_auth_registration_verify_email_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmail"];
        "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
        "multipart/form-data": components["schemas"]["VerifyEmail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  api_auth_token_refresh_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefresh"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
        "multipart/form-data": components["schemas"]["TokenRefresh"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  /**
   * @description Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  api_auth_token_verify_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerify"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenVerify"];
        "multipart/form-data": components["schemas"]["TokenVerify"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenVerify"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  api_auth_user_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  api_auth_user_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  api_auth_user_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUser"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
        "multipart/form-data": components["schemas"]["PatchedUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  api_bot_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  api_games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  api_games_tournaments_list: {
    parameters: {
      query?: {
        frequency?: "EVERY_DAY" | "EVERY_MONTH" | "EVERY_WEEK" | "EVERY_YEAR" | "SINGLE";
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        status?: "CREATED" | "FINISHED" | "IN_PROGRESS";
        teams_of_match?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTournamentReadOnlyList"];
        };
      };
    };
  };
  api_games_tournaments_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentReadOnly"];
        };
      };
    };
  };
  api_games_tournaments_matches_list: {
    parameters: {
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentMatchReadOnly"][];
        };
      };
    };
  };
  api_games_tournaments_matches_scores_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedScoreReadOnlyList"];
        };
      };
    };
  };
  /** @description Override create method for return ScoreReadOnlySerializer data */
  api_games_tournaments_matches_scores_create: {
    parameters: {
      path: {
        game_pk: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["ScoreUpdate"];
        "multipart/form-data": components["schemas"]["ScoreUpdate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ScoreUpdate"];
        };
      };
    };
  };
  api_games_tournaments_matches_scores_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ScoreReadOnly"];
        };
      };
    };
  };
  api_games_tournaments_matches_screenshots_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedMatchTeamScreenshotReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  api_games_tournaments_matches_screenshots_create: {
    parameters: {
      path: {
        game_pk: string;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MatchTeamScreenshot"];
        "application/x-www-form-urlencoded": components["schemas"]["MatchTeamScreenshot"];
        "multipart/form-data": components["schemas"]["MatchTeamScreenshot"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MatchTeamScreenshot"];
        };
      };
    };
  };
  api_games_tournaments_matches_screenshots_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this match team screenshot. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MatchTeamScreenshotReadOnly"];
        };
      };
    };
  };
  /** @description Delete object */
  api_games_tournaments_matches_screenshots_destroy: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this match team screenshot. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Update object */
  api_games_tournaments_matches_statuses_update: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this team match status. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamMatchStatus"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamMatchStatus"];
        "multipart/form-data": components["schemas"]["TeamMatchStatus"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamMatchStatus"];
        };
      };
    };
  };
  api_games_tournaments_matches_statuses_partial_update: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this team match status. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamMatchStatus"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamMatchStatus"];
        "multipart/form-data": components["schemas"]["PatchedTeamMatchStatus"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamMatchStatus"];
        };
      };
    };
  };
  api_games_tournaments_matches_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentMatchReadOnly"];
        };
      };
    };
  };
  api_games_tournaments_teams_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTournamentTeamReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  api_games_tournaments_teams_create: {
    parameters: {
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TournamentTeamCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TournamentTeamCreate"];
        "multipart/form-data": components["schemas"]["TournamentTeamCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TournamentTeamCreate"];
        };
      };
    };
  };
  api_games_tournaments_teams_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentTeamReadOnly"];
        };
      };
    };
  };
  /** @description Delete object */
  api_games_tournaments_teams_destroy: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  api_games_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this game. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  api_grid_update_grid_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description ViewSet for get list matches for current player */
  api_matches_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        status?: "BYE" | "FINISHED" | "NOT_STARTED" | "STARTED";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerMatchList"];
        };
      };
    };
  };
  /** @description ViewSet for get list matches for current player */
  api_matches_retrieve: {
    parameters: {
      query?: {
        status?: "BYE" | "FINISHED" | "NOT_STARTED" | "STARTED";
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerMatch"];
        };
      };
    };
  };
  /**
   * @description Connects created social account to player
   *
   * Bypasses request to the concrete system connect view according to player value
   */
  api_oauth2_connect_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlayerOAuth2ViewSetConnect"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerOAuth2ViewSetConnect"];
        "multipart/form-data": components["schemas"]["PlayerOAuth2ViewSetConnect"];
      };
    };
    responses: {
      /** @description Successfully connected */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Bypasses request to the concrete system login view according to connector value
   *
   * :return: Response with redirect to system login page
   */
  api_oauth2_link_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlayerOAuth2ViewSetLink"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerOAuth2ViewSetLink"];
        "multipart/form-data": components["schemas"]["PlayerOAuth2ViewSetLink"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerOAuth2ViewSetLink"];
        };
      };
    };
  };
  api_platforms_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExternalPlatformReadOnlyList"];
        };
      };
    };
  };
  api_platforms_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this external platform. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExternalPlatformReadOnly"];
        };
      };
    };
  };
  /** @description Manager for Player model. */
  api_players_list: {
    parameters: {
      query?: {
        /** @description Multiple values may be separated by commas. */
        favourite_games__in?: number[];
        id?: number;
        id__in?: number[];
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerReadOnlyList"];
        };
      };
    };
  };
  /** @description Manager for Player model. */
  api_players_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerReadOnly"];
        };
      };
    };
  };
  api_players_games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        player_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  api_players_games_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this game. */
        id: number;
        player_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  /** @description Viewset for Position model */
  api_positions_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamPositionReadOnlyList"];
        };
      };
    };
  };
  /** @description Viewset for Position model */
  api_positions_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team position. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPositionReadOnly"];
        };
      };
    };
  };
  /** @description Manager for Team model. */
  api_teams_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  api_teams_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Manager for Team model. */
  api_teams_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamReadOnly"];
        };
      };
    };
  };
  /** @description Update object */
  api_teams_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamUpdate"];
        "multipart/form-data": components["schemas"]["TeamUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamUpdate"];
        };
      };
    };
  };
  /** @description Delete object */
  api_teams_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Manager for Team model. */
  api_teams_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTeamUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamUpdate"];
        };
      };
    };
  };
  /** @description Used to get a list of games in the team. */
  api_teams_games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  /** @description Used to manage players in teams. */
  api_teams_games_players_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
      path: {
        game_pk: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamPlayerReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  api_teams_games_players_create: {
    parameters: {
      path: {
        game_pk: string;
        team_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamPlayerCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamPlayerCreate"];
        "multipart/form-data": components["schemas"]["TeamPlayerCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TeamPlayerCreate"];
        };
      };
    };
  };
  /** @description Used to manage players in teams. */
  api_teams_games_players_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerReadOnly"];
        };
      };
    };
  };
  /** @description Update object */
  api_teams_games_players_update: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamPlayerUpdate"];
        "multipart/form-data": components["schemas"]["TeamPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Delete object */
  api_teams_games_players_destroy: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Used to manage players in teams. */
  api_teams_games_players_partial_update: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamPlayerUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTeamPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Accepts invitation to team. */
  api_teams_games_players_accept_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Declines invitation to team. */
  api_teams_games_players_decline_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Used to get a list of games in the team. */
  api_teams_games_retrieve: {
    parameters: {
      path: {
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  api_users_players_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        user_pk: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerReadOnlyList"];
        };
      };
    };
  };
  api_users_players_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
        user_pk: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerUpdate"];
        "multipart/form-data": components["schemas"]["PlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerUpdate"];
        };
      };
    };
  };
  api_users_players_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
        user_pk: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlayerUpdate"];
        "multipart/form-data": components["schemas"]["PatchedPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerUpdate"];
        };
      };
    };
  };
  attachments_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAttachmentReadOnlyList"];
        };
      };
    };
  };
  attachments_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttachmentCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentCreate"];
        "multipart/form-data": components["schemas"]["AttachmentCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AttachmentCreate"];
        };
      };
    };
  };
  attachments_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  attachments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AttachmentReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentReadOnly"];
        "multipart/form-data": components["schemas"]["AttachmentReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  attachments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  attachments_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedAttachmentReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAttachmentReadOnly"];
        "multipart/form-data": components["schemas"]["PatchedAttachmentReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentReadOnly"];
        };
      };
    };
  };
  attachments_attachment_groups_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAttachmentGroupReadOnlyList"];
        };
      };
    };
  };
  attachments_attachment_groups_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        };
      };
    };
  };
  /** @description Action for update or delete attachments */
  attachments_attachment_groups_attachments_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        "application/x-www-form-urlencoded": components["schemas"]["AttachmentGroupReadOnly"];
        "multipart/form-data": components["schemas"]["AttachmentGroupReadOnly"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentGroupReadOnly"];
        };
      };
    };
  };
  /** @description Action for update or delete attachments */
  attachments_attachment_groups_attachments_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this attachment group. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Check the credentials and return the REST Token
   * if the credentials are valid and authenticated.
   * Calls Django Auth login method to register User ID
   * in Django session framework
   *
   * Accept the following POST parameters: username, password
   * Return the REST Framework Token Object's key.
   */
  auth_login_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
        "application/x-www-form-urlencoded": components["schemas"]["Login"];
        "multipart/form-data": components["schemas"]["Login"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JWT"];
        };
      };
    };
  };
  /**
   * @description Calls Django logout method and delete the Token object
   * assigned to the current User object.
   *
   * Accepts/Returns nothing.
   */
  auth_logout_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth SetPasswordForm save method.
   *
   * Accepts the following POST parameters: new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_change_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChange"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
        "multipart/form-data": components["schemas"]["PasswordChange"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Calls Django Auth PasswordResetForm save method.
   *
   * Accepts the following POST parameters: email
   * Returns the success/fail message.
   */
  auth_password_reset_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
        "multipart/form-data": components["schemas"]["PasswordReset"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Password reset e-mail link is confirmed, therefore
   * this resets the user's password.
   *
   * Accepts the following POST parameters: token, uid,
   *     new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_reset_confirm_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
        "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
        "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  auth_registration_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Register"];
        "application/x-www-form-urlencoded": components["schemas"]["Register"];
        "multipart/form-data": components["schemas"]["Register"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["JWT"];
        };
      };
    };
  };
  auth_registration_resend_email_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResendEmailVerification"];
        "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
        "multipart/form-data": components["schemas"]["ResendEmailVerification"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  auth_registration_verify_email_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmail"];
        "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
        "multipart/form-data": components["schemas"]["VerifyEmail"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * @description Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  auth_token_refresh_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefresh"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
        "multipart/form-data": components["schemas"]["TokenRefresh"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
  };
  /**
   * @description Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  auth_token_verify_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerify"];
        "application/x-www-form-urlencoded": components["schemas"]["TokenVerify"];
        "multipart/form-data": components["schemas"]["TokenVerify"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenVerify"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /**
   * @description Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_partial_update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedUser"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
        "multipart/form-data": components["schemas"]["PatchedUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  bot_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  games_tournaments_list: {
    parameters: {
      query?: {
        frequency?: "EVERY_DAY" | "EVERY_MONTH" | "EVERY_WEEK" | "EVERY_YEAR" | "SINGLE";
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        status?: "CREATED" | "FINISHED" | "IN_PROGRESS";
        teams_of_match?: number;
      };
      path: {
        game_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTournamentReadOnlyList"];
        };
      };
    };
  };
  games_tournaments_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentReadOnly"];
        };
      };
    };
  };
  games_tournaments_matches_list: {
    parameters: {
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentMatchReadOnly"][];
        };
      };
    };
  };
  games_tournaments_matches_scores_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedScoreReadOnlyList"];
        };
      };
    };
  };
  /** @description Override create method for return ScoreReadOnlySerializer data */
  games_tournaments_matches_scores_create: {
    parameters: {
      path: {
        game_pk: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScoreUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["ScoreUpdate"];
        "multipart/form-data": components["schemas"]["ScoreUpdate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ScoreUpdate"];
        };
      };
    };
  };
  games_tournaments_matches_scores_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        match_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ScoreReadOnly"];
        };
      };
    };
  };
  games_tournaments_matches_screenshots_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedMatchTeamScreenshotReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  games_tournaments_matches_screenshots_create: {
    parameters: {
      path: {
        game_pk: string;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MatchTeamScreenshot"];
        "application/x-www-form-urlencoded": components["schemas"]["MatchTeamScreenshot"];
        "multipart/form-data": components["schemas"]["MatchTeamScreenshot"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["MatchTeamScreenshot"];
        };
      };
    };
  };
  games_tournaments_matches_screenshots_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this match team screenshot. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MatchTeamScreenshotReadOnly"];
        };
      };
    };
  };
  /** @description Delete object */
  games_tournaments_matches_screenshots_destroy: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this match team screenshot. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Update object */
  games_tournaments_matches_statuses_update: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this team match status. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamMatchStatus"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamMatchStatus"];
        "multipart/form-data": components["schemas"]["TeamMatchStatus"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamMatchStatus"];
        };
      };
    };
  };
  games_tournaments_matches_statuses_partial_update: {
    parameters: {
      path: {
        game_pk: string;
        /** @description A unique integer value identifying this team match status. */
        id: number;
        match_pk: number;
        tournament_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamMatchStatus"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamMatchStatus"];
        "multipart/form-data": components["schemas"]["PatchedTeamMatchStatus"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamMatchStatus"];
        };
      };
    };
  };
  games_tournaments_matches_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentMatchReadOnly"];
        };
      };
    };
  };
  games_tournaments_teams_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTournamentTeamReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  games_tournaments_teams_create: {
    parameters: {
      path: {
        game_pk: string;
        tournament_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TournamentTeamCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TournamentTeamCreate"];
        "multipart/form-data": components["schemas"]["TournamentTeamCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TournamentTeamCreate"];
        };
      };
    };
  };
  games_tournaments_teams_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TournamentTeamReadOnly"];
        };
      };
    };
  };
  /** @description Delete object */
  games_tournaments_teams_destroy: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        tournament_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  games_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this game. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  grid_update_grid_retrieve: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description ViewSet for get list matches for current player */
  matches_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        status?: "BYE" | "FINISHED" | "NOT_STARTED" | "STARTED";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerMatchList"];
        };
      };
    };
  };
  /** @description ViewSet for get list matches for current player */
  matches_retrieve: {
    parameters: {
      query?: {
        status?: "BYE" | "FINISHED" | "NOT_STARTED" | "STARTED";
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerMatch"];
        };
      };
    };
  };
  /**
   * @description Connects created social account to player
   *
   * Bypasses request to the concrete system connect view according to player value
   */
  oauth2_connect_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlayerOAuth2ViewSetConnect"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerOAuth2ViewSetConnect"];
        "multipart/form-data": components["schemas"]["PlayerOAuth2ViewSetConnect"];
      };
    };
    responses: {
      /** @description Successfully connected */
      204: {
        content: never;
      };
    };
  };
  /**
   * @description Bypasses request to the concrete system login view according to connector value
   *
   * :return: Response with redirect to system login page
   */
  oauth2_link_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlayerOAuth2ViewSetLink"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerOAuth2ViewSetLink"];
        "multipart/form-data": components["schemas"]["PlayerOAuth2ViewSetLink"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerOAuth2ViewSetLink"];
        };
      };
    };
  };
  platforms_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExternalPlatformReadOnlyList"];
        };
      };
    };
  };
  platforms_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this external platform. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExternalPlatformReadOnly"];
        };
      };
    };
  };
  /** @description Manager for Player model. */
  players_list: {
    parameters: {
      query?: {
        /** @description Multiple values may be separated by commas. */
        favourite_games__in?: number[];
        id?: number;
        id__in?: number[];
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerReadOnlyList"];
        };
      };
    };
  };
  /** @description Manager for Player model. */
  players_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerReadOnly"];
        };
      };
    };
  };
  players_games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        player_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  players_games_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this game. */
        id: number;
        player_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  /** @description Viewset for Position model */
  positions_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamPositionReadOnlyList"];
        };
      };
    };
  };
  /** @description Viewset for Position model */
  positions_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team position. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPositionReadOnly"];
        };
      };
    };
  };
  /** @description Manager for Team model. */
  teams_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  teams_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** @description Manager for Team model. */
  teams_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamReadOnly"];
        };
      };
    };
  };
  /** @description Update object */
  teams_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamUpdate"];
        "multipart/form-data": components["schemas"]["TeamUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamUpdate"];
        };
      };
    };
  };
  /** @description Delete object */
  teams_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Manager for Team model. */
  teams_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this team. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTeamUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamUpdate"];
        };
      };
    };
  };
  /** @description Used to get a list of games in the team. */
  teams_games_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGameReadOnlyList"];
        };
      };
    };
  };
  /** @description Used to manage players in teams. */
  teams_games_players_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
        /** @description A search term. */
        search?: string;
      };
      path: {
        game_pk: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamPlayerReadOnlyList"];
        };
      };
    };
  };
  /** @description Create object */
  teams_games_players_create: {
    parameters: {
      path: {
        game_pk: string;
        team_pk: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamPlayerCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamPlayerCreate"];
        "multipart/form-data": components["schemas"]["TeamPlayerCreate"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TeamPlayerCreate"];
        };
      };
    };
  };
  /** @description Used to manage players in teams. */
  teams_games_players_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerReadOnly"];
        };
      };
    };
  };
  /** @description Update object */
  teams_games_players_update: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["TeamPlayerUpdate"];
        "multipart/form-data": components["schemas"]["TeamPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Delete object */
  teams_games_players_destroy: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Used to manage players in teams. */
  teams_games_players_partial_update: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedTeamPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeamPlayerUpdate"];
        "multipart/form-data": components["schemas"]["PatchedTeamPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Accepts invitation to team. */
  teams_games_players_accept_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Declines invitation to team. */
  teams_games_players_decline_retrieve: {
    parameters: {
      path: {
        game_pk: string;
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TeamPlayerUpdate"];
        };
      };
    };
  };
  /** @description Used to get a list of games in the team. */
  teams_games_retrieve: {
    parameters: {
      path: {
        id: string;
        team_pk: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GameReadOnly"];
        };
      };
    };
  };
  users_players_list: {
    parameters: {
      query?: {
        /** @description Number of results to return per page. */
        limit?: number;
        /** @description The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        user_pk: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPlayerReadOnlyList"];
        };
      };
    };
  };
  users_players_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
        user_pk: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PlayerUpdate"];
        "multipart/form-data": components["schemas"]["PlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerUpdate"];
        };
      };
    };
  };
  users_players_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this player. */
        id: number;
        user_pk: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedPlayerUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlayerUpdate"];
        "multipart/form-data": components["schemas"]["PatchedPlayerUpdate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlayerUpdate"];
        };
      };
    };
  };
}
